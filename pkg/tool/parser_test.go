package tool_test

import (
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/spf13/afero"

	"github.com/izumin5210/gex/pkg/manager"
	"github.com/izumin5210/gex/pkg/tool"
)

func TestParser_Parse(t *testing.T) {
	fs := afero.NewMemMapFs()
	parser := tool.NewParser(fs, manager.TypeModules)

	testcases := []struct {
		name                   string
		toolsGo                string
		expectTools            []tool.Tool
		expectDefaultBuildMode tool.BuildMode
	}{
		{
			name: "no default build mode",
			toolsGo: `// Code generated by github.comm/izumin5210/gex. DO NOT EDIT.

// +build tools

package tools

import (
	_ "github.com/gogo/protobuf/protoc-gen-gogofast"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway"
	//gex:bin
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger"
	//gex:nobin
	_ "github.com/volatiletech/sqlboiler"
	//gex:nobin
	_ "github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql"
)
`,
			expectTools: []tool.Tool{
				{"github.com/gogo/protobuf/protoc-gen-gogofast", tool.BuildModeUnknown},
				{"github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway", tool.BuildModeUnknown},
				{"github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger", tool.BuildModeBin},
				{"github.com/volatiletech/sqlboiler", tool.BuildModeNoBin},
				{"github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql", tool.BuildModeNoBin},
			},
			expectDefaultBuildMode: tool.BuildModeBin,
		},
		{
			name: "default build mode set to build",
			toolsGo: `// Code generated by github.comm/izumin5210/gex. DO NOT EDIT.

// +build tools
//gex:bin

package tools

import (
	_ "github.com/gogo/protobuf/protoc-gen-gogofast"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway"
	//gex:bin
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger"
	//gex:nobin
	_ "github.com/volatiletech/sqlboiler"
	//gex:nobin
	_ "github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql"
)
`,
			expectTools: []tool.Tool{
				{"github.com/gogo/protobuf/protoc-gen-gogofast", tool.BuildModeUnknown},
				{"github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway", tool.BuildModeUnknown},
				{"github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger", tool.BuildModeBin},
				{"github.com/volatiletech/sqlboiler", tool.BuildModeNoBin},
				{"github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql", tool.BuildModeNoBin},
			},
			expectDefaultBuildMode: tool.BuildModeBin,
		},
		{
			name: "default build mode set to nobuild",
			toolsGo: `// Code generated by github.comm/izumin5210/gex. DO NOT EDIT.

// +build tools
//gex:nobin

package tools

import (
	_ "github.com/gogo/protobuf/protoc-gen-gogofast"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway"
	//gex:bin
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger"
	//gex:nobin
	_ "github.com/volatiletech/sqlboiler"
	//gex:nobin
	_ "github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql"
)
`,
			expectTools: []tool.Tool{
				{"github.com/gogo/protobuf/protoc-gen-gogofast", tool.BuildModeUnknown},
				{"github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway", tool.BuildModeUnknown},
				{"github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger", tool.BuildModeBin},
				{"github.com/volatiletech/sqlboiler", tool.BuildModeNoBin},
				{"github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql", tool.BuildModeNoBin},
			},
			expectDefaultBuildMode: tool.BuildModeNoBin,
		},
	}
	for _, testcase := range testcases {
		path := "/home/src/awesomeapp/tools"

		err := afero.WriteFile(fs, path, []byte(testcase.toolsGo), 0644)
		if err != nil {
			t.Fatalf("faield to write %s: %v", path, err)
		}

		out, err := parser.Parse(path)

		if err != nil {
			t.Fatalf("Parse() returned an error: %v", err)
		}

		if diff := cmp.Diff(testcase.expectTools, out.Tools()); diff != "" {
			t.Errorf("tool differs: (-want +got)\n%s", diff)
		}

		if diff := cmp.Diff(testcase.expectDefaultBuildMode, out.DefaultBuildMode()); diff != "" {
			t.Errorf("tool differs: (-want +got)\n%s", diff)
		}
	}
}
